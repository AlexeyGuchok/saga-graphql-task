{"ast":null,"code":"import ProductsService from \"../../services/products\";\nimport { call, put, takeEvery, select, all, take, takeLatest } from \"redux-saga/effects\";\nimport actionTypes from \"../constants\";\nimport { productsFetchSuccess, productsFetchError, productsDeleteOneSuccess, productsDeleteOneError, productsAddError, productsAddSuccess } from \"../actions/products\";\n\nfunction* getProducts(action) {\n  try {\n    const data = yield call(ProductsService.getProductsQuery);\n    yield put(productsFetchSuccess({\n      products: data.data.products\n    }));\n  } catch (error) {\n    yield put(productsFetchError(error));\n    console.log(error);\n  }\n}\n\nexport function* saga() {\n  yield all([takeLatest(actionTypes.PRODUCTS_FETCH_START, getProducts)]);\n}\n\nfunction* deleteOneProduct(action) {\n  try {\n    const data = yield call(ProductsService.deleteProductQuery, action.payload);\n\n    if (data.status == \"200\") {\n      yield put(productsDeleteOneSuccess({\n        deletedProductId: action.payload\n      }));\n    }\n  } catch (error) {\n    yield put(productsDeleteOneError(error));\n    console.log(error);\n  }\n}\n\nexport function* deleteOne() {\n  yield all([takeLatest(actionTypes.PRODUCTS_DETELE_ONE, deleteOneProduct)]);\n}\n\nfunction* addProduct(action) {\n  try {\n    const data = yield call(ProductsService.addProductQuery, action.payload); // if (data.status == \"200\") {\n    //   yield put(productsAddSuccess({ deletedProductId: action.payload }));\n    // }\n  } catch (error) {\n    // yield put(productsDeleteOneError(error));\n    console.log(error);\n  }\n}\n\nexport function* addNewProduct() {\n  yield all([takeLatest(actionTypes.PRODUCTS_ADD, addProduct)]);\n}","map":{"version":3,"sources":["C:/Users/lu4ok/Desktop/Practice/DZ/nextjs-app/redux/sagas/products.js"],"names":["ProductsService","call","put","takeEvery","select","all","take","takeLatest","actionTypes","productsFetchSuccess","productsFetchError","productsDeleteOneSuccess","productsDeleteOneError","productsAddError","productsAddSuccess","getProducts","action","data","getProductsQuery","products","error","console","log","saga","PRODUCTS_FETCH_START","deleteOneProduct","deleteProductQuery","payload","status","deletedProductId","deleteOne","PRODUCTS_DETELE_ONE","addProduct","addProductQuery","addNewProduct","PRODUCTS_ADD"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,yBAA5B;AACA,SACEC,IADF,EAEEC,GAFF,EAGEC,SAHF,EAIEC,MAJF,EAKEC,GALF,EAMEC,IANF,EAOEC,UAPF,QAQO,oBARP;AASA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SACEC,oBADF,EAEEC,kBAFF,EAGEC,wBAHF,EAIEC,sBAJF,EAKEC,gBALF,EAMEC,kBANF,QAOO,qBAPP;;AASA,UAAUC,WAAV,CAAsBC,MAAtB,EAA8B;AAC5B,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMhB,IAAI,CAACD,eAAe,CAACkB,gBAAjB,CAAvB;AACA,UAAMhB,GAAG,CAACO,oBAAoB,CAAC;AAAEU,MAAAA,QAAQ,EAAEF,IAAI,CAACA,IAAL,CAAUE;AAAtB,KAAD,CAArB,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACQ,kBAAkB,CAACU,KAAD,CAAnB,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,OAAO,UAAUG,IAAV,GAAiB;AACtB,QAAMlB,GAAG,CAAC,CAACE,UAAU,CAACC,WAAW,CAACgB,oBAAb,EAAmCT,WAAnC,CAAX,CAAD,CAAT;AACD;;AAED,UAAUU,gBAAV,CAA2BT,MAA3B,EAAmC;AACjC,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMhB,IAAI,CAACD,eAAe,CAAC0B,kBAAjB,EAAqCV,MAAM,CAACW,OAA5C,CAAvB;;AACA,QAAIV,IAAI,CAACW,MAAL,IAAe,KAAnB,EAA0B;AACxB,YAAM1B,GAAG,CAACS,wBAAwB,CAAC;AAAEkB,QAAAA,gBAAgB,EAAEb,MAAM,CAACW;AAA3B,OAAD,CAAzB,CAAT;AACD;AACF,GALD,CAKE,OAAOP,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACU,sBAAsB,CAACQ,KAAD,CAAvB,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,OAAO,UAAUU,SAAV,GAAsB;AAC3B,QAAMzB,GAAG,CAAC,CAACE,UAAU,CAACC,WAAW,CAACuB,mBAAb,EAAkCN,gBAAlC,CAAX,CAAD,CAAT;AACD;;AAED,UAAUO,UAAV,CAAqBhB,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMhB,IAAI,CAACD,eAAe,CAACiC,eAAjB,EAAkCjB,MAAM,CAACW,OAAzC,CAAvB,CADE,CAEF;AACA;AACA;AACD,GALD,CAKE,OAAOP,KAAP,EAAc;AACd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,OAAO,UAAUc,aAAV,GAA0B;AAC/B,QAAM7B,GAAG,CAAC,CAACE,UAAU,CAACC,WAAW,CAAC2B,YAAb,EAA2BH,UAA3B,CAAX,CAAD,CAAT;AACD","sourcesContent":["import ProductsService from \"../../services/products\";\r\nimport {\r\n  call,\r\n  put,\r\n  takeEvery,\r\n  select,\r\n  all,\r\n  take,\r\n  takeLatest,\r\n} from \"redux-saga/effects\";\r\nimport actionTypes from \"../constants\";\r\nimport {\r\n  productsFetchSuccess,\r\n  productsFetchError,\r\n  productsDeleteOneSuccess,\r\n  productsDeleteOneError,\r\n  productsAddError,\r\n  productsAddSuccess,\r\n} from \"../actions/products\";\r\n\r\nfunction* getProducts(action) {\r\n  try {\r\n    const data = yield call(ProductsService.getProductsQuery);\r\n    yield put(productsFetchSuccess({ products: data.data.products }));\r\n  } catch (error) {\r\n    yield put(productsFetchError(error));\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* saga() {\r\n  yield all([takeLatest(actionTypes.PRODUCTS_FETCH_START, getProducts)]);\r\n}\r\n\r\nfunction* deleteOneProduct(action) {\r\n  try {\r\n    const data = yield call(ProductsService.deleteProductQuery, action.payload);\r\n    if (data.status == \"200\") {\r\n      yield put(productsDeleteOneSuccess({ deletedProductId: action.payload }));\r\n    }\r\n  } catch (error) {\r\n    yield put(productsDeleteOneError(error));\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* deleteOne() {\r\n  yield all([takeLatest(actionTypes.PRODUCTS_DETELE_ONE, deleteOneProduct)]);\r\n}\r\n\r\nfunction* addProduct(action) {\r\n  try {\r\n    const data = yield call(ProductsService.addProductQuery, action.payload);\r\n    // if (data.status == \"200\") {\r\n    //   yield put(productsAddSuccess({ deletedProductId: action.payload }));\r\n    // }\r\n  } catch (error) {\r\n    // yield put(productsDeleteOneError(error));\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* addNewProduct() {\r\n  yield all([takeLatest(actionTypes.PRODUCTS_ADD, addProduct)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}