{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport ProductList from \"./productList\";\nimport AddProduct from \"./addProduct\";\nimport { rootReducer } from \"../redux/rootReducer\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (true) {\n    // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n    var _require = require(\"redux-devtools-extension\"),\n        composeWithDevTools = _require.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nexport var makeStore = function makeStore(preloadedState, ctx) {\n  var isServer = ctx.isServer,\n      _ctx$req = ctx.req,\n      req = _ctx$req === void 0 ? null : _ctx$req;\n  var sagaMiddleware = createSagaMiddleware();\n  var store = createStore(rootReducer, preloadedState, bindMiddleware([sagaMiddleware]));\n\n  if (req || !isServer) {\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n  }\n\n  return store;\n};\nvar client = new ApolloClient({\n  uri: \"http://localhost:4001/graphql\"\n});\n\nvar Index = function Index() {\n  return __jsx(Provider, {\n    store: makeStore()\n  }, __jsx(\"section\", null, __jsx(\"h1\", null, \"\\u041F\\u0440\\u043E\\u0434\\u0443\\u043A\\u0442\\u044B\"), __jsx(ProductList, null), __jsx(AddProduct, null)));\n};\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["C:/Users/lu4ok/Desktop/Practice/DZ/nextjs-app/pages/index.js"],"names":["React","Component","ApolloClient","ApolloProvider","ProductList","AddProduct","rootReducer","Provider","applyMiddleware","createStore","createSagaMiddleware","bindMiddleware","middleware","require","composeWithDevTools","makeStore","preloadedState","ctx","isServer","req","sagaMiddleware","store","sagaTask","run","rootSaga","client","uri","Index"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,UAAD,EAAgB;AACrC,YAA2C;AACzC;AADyC,mBAETC,OAAO,CAAC,0BAAD,CAFE;AAAA,QAEjCC,mBAFiC,YAEjCA,mBAFiC;;AAGzC,WAAOA,mBAAmB,CAACN,eAAe,MAAf,4BAAmBI,UAAnB,EAAD,CAA1B;AACD;;AACD,SAAOJ,eAAe,MAAf,4BAAmBI,UAAnB,EAAP;AACD,CAPD;;AASA,OAAO,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACC,cAAD,EAAiBC,GAAjB,EAAyB;AAAA,MACxCC,QADwC,GACfD,GADe,CACxCC,QADwC;AAAA,iBACfD,GADe,CAC9BE,GAD8B;AAAA,MAC9BA,GAD8B,yBACxB,IADwB;AAGhD,MAAMC,cAAc,GAAGV,oBAAoB,EAA3C;AAEA,MAAMW,KAAK,GAAGZ,WAAW,CACvBH,WADuB,EAEvBU,cAFuB,EAGvBL,cAAc,CAAC,CAACS,cAAD,CAAD,CAHS,CAAzB;;AAMA,MAAID,GAAG,IAAI,CAACD,QAAZ,EAAsB;AACpBG,IAAAA,KAAK,CAACC,QAAN,GAAiBF,cAAc,CAACG,GAAf,CAAmBC,QAAnB,CAAjB;AACD;;AAED,SAAOH,KAAP;AACD,CAhBM;AAkBP,IAAMI,MAAM,GAAG,IAAIvB,YAAJ,CAAiB;AAC9BwB,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;;AAIA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEZ,SAAS;AAA1B,KAEI,uBACE,qEADF,EAEE,MAAC,WAAD,OAFF,EAGE,MAAC,UAAD,OAHF,CAFJ,CADF;AAWD,CAZD;;KAAMY,K;AAcN,eAAeA,KAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport ProductList from \"./productList\";\r\nimport AddProduct from \"./addProduct\";\r\nimport { rootReducer } from \"../redux/rootReducer\";\r\nimport { Provider } from \"react-redux\";\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nconst bindMiddleware = (middleware) => {\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    // eslint-disable-next-line global-require,import/no-extraneous-dependencies\r\n    const { composeWithDevTools } = require(\"redux-devtools-extension\");\r\n    return composeWithDevTools(applyMiddleware(...middleware));\r\n  }\r\n  return applyMiddleware(...middleware);\r\n};\r\n\r\nexport const makeStore = (preloadedState, ctx) => {\r\n  const { isServer, req = null } = ctx;\r\n\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    bindMiddleware([sagaMiddleware])\r\n  );\r\n\r\n  if (req || !isServer) {\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  }\r\n\r\n  return store;\r\n};\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"http://localhost:4001/graphql\",\r\n});\r\n\r\nconst Index = () => {\r\n  return (\r\n    <Provider store={makeStore()}>\r\n      \r\n        <section>\r\n          <h1>Продукты</h1>\r\n          <ProductList />\r\n          <AddProduct />\r\n        </section>\r\n \r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}