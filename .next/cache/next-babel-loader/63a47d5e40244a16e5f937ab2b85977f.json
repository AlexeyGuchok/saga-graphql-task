{"ast":null,"code":"import ProductsService from \"../../services/products\";\nimport { call, put, takeEvery, select, all, take, takeLatest } from \"redux-saga/effects\";\nimport actionTypes from \"../constants\";\nimport { productsFetchSuccess, productsFetchError } from \"../actions/products\";\n\nfunction* getProducts(action) {\n  try {\n    const pro = yield call(ProductsService.getProductsQuery);\n    yield put(productsFetchSuccess(data));\n  } catch (error) {\n    yield put(productsFetchError(error));\n    console.log(error);\n  }\n}\n\nexport function* saga() {\n  yield all([takeLatest(actionTypes.PRODUCTS_FETCH_START, getProducts)]);\n}","map":{"version":3,"sources":["C:/Users/lu4ok/Desktop/Practice/DZ/nextjs-app/redux/sagas/products.js"],"names":["ProductsService","call","put","takeEvery","select","all","take","takeLatest","actionTypes","productsFetchSuccess","productsFetchError","getProducts","action","pro","getProductsQuery","data","error","console","log","saga","PRODUCTS_FETCH_START"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,yBAA5B;AACA,SACEC,IADF,EAEEC,GAFF,EAGEC,SAHF,EAIEC,MAJF,EAKEC,GALF,EAMEC,IANF,EAOEC,UAPF,QAQO,oBARP;AASA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,oBAAT,EAA+BC,kBAA/B,QAAyD,qBAAzD;;AAEA,UAAUC,WAAV,CAAsBC,MAAtB,EAA8B;AAC5B,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMZ,IAAI,CAACD,eAAe,CAACc,gBAAjB,CAAtB;AACA,UAAMZ,GAAG,CAACO,oBAAoB,CAACM,IAAD,CAArB,CAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,UAAMd,GAAG,CAACQ,kBAAkB,CAACM,KAAD,CAAnB,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAED,OAAO,UAAUG,IAAV,GAAiB;AACtB,QAAMd,GAAG,CAAC,CAACE,UAAU,CAACC,WAAW,CAACY,oBAAb,EAAmCT,WAAnC,CAAX,CAAD,CAAT;AACD","sourcesContent":["import ProductsService from \"../../services/products\";\r\nimport {\r\n  call,\r\n  put,\r\n  takeEvery,\r\n  select,\r\n  all,\r\n  take,\r\n  takeLatest,\r\n} from \"redux-saga/effects\";\r\nimport actionTypes from \"../constants\";\r\nimport { productsFetchSuccess, productsFetchError } from \"../actions/products\";\r\n\r\nfunction* getProducts(action) {\r\n  try {\r\n    const pro = yield call(ProductsService.getProductsQuery);\r\n    yield put(productsFetchSuccess(data));\r\n  } catch (error) {\r\n    yield put(productsFetchError(error));\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* saga() {\r\n  yield all([takeLatest(actionTypes.PRODUCTS_FETCH_START, getProducts)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}