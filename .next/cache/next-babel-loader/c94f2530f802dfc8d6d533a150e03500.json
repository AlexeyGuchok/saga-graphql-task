{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport ProductList from \"./productList\";\nimport AddProduct from \"./addProduct\";\nimport { rootReducer } from \"../redux/rootReducer\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n    const {\n      composeWithDevTools\n    } = require(\"redux-devtools-extension\");\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nexport const makeStore = (preloadedState, ctx) => {\n  const {\n    isServer,\n    req = null\n  } = ctx;\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(rootReducer, preloadedState, bindMiddleware([sagaMiddleware]));\n\n  if (req || !isServer) {\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n  }\n\n  return store;\n};\nconst client = new ApolloClient({\n  uri: \"http://localhost:4001/graphql\"\n});\n\nconst Index = () => {\n  return __jsx(Provider, {\n    store: makeStore()\n  }, __jsx(ApolloProvider, {\n    client: client\n  }, __jsx(\"section\", null, __jsx(\"h1\", null, \"\\u041F\\u0440\\u043E\\u0434\\u0443\\u043A\\u0442\\u044B\"), __jsx(ProductList, null), __jsx(AddProduct, null))));\n};\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/lu4ok/Desktop/Practice/DZ/nextjs-app/pages/index.js"],"names":["React","Component","ApolloClient","ApolloProvider","ProductList","AddProduct","rootReducer","Provider","applyMiddleware","createStore","createSagaMiddleware","bindMiddleware","middleware","composeWithDevTools","require","makeStore","preloadedState","ctx","isServer","req","sagaMiddleware","store","sagaTask","run","rootSaga","client","uri","Index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;;AAEA,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AACrC,YAA2C;AACzC;AACA,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACL,eAAe,CAAC,GAAGI,UAAJ,CAAhB,CAA1B;AACD;;AACD,SAAOJ,eAAe,CAAC,GAAGI,UAAJ,CAAtB;AACD,CAPD;;AASA,OAAO,MAAMG,SAAS,GAAG,CAACC,cAAD,EAAiBC,GAAjB,KAAyB;AAChD,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,GAAG,GAAG;AAAlB,MAA2BF,GAAjC;AAEA,QAAMG,cAAc,GAAGV,oBAAoB,EAA3C;AAEA,QAAMW,KAAK,GAAGZ,WAAW,CACvBH,WADuB,EAEvBU,cAFuB,EAGvBL,cAAc,CAAC,CAACS,cAAD,CAAD,CAHS,CAAzB;;AAMA,MAAID,GAAG,IAAI,CAACD,QAAZ,EAAsB;AACpBG,IAAAA,KAAK,CAACC,QAAN,GAAiBF,cAAc,CAACG,GAAf,CAAmBC,QAAnB,CAAjB;AACD;;AAED,SAAOH,KAAP;AACD,CAhBM;AAkBP,MAAMI,MAAM,GAAG,IAAIvB,YAAJ,CAAiB;AAC9BwB,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;;AAIA,MAAMC,KAAK,GAAG,MAAM;AAClB,SACE,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEZ,SAAS;AAA1B,KACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEU;AAAxB,KACE,uBACE,qEADF,EAEE,MAAC,WAAD,OAFF,EAGE,MAAC,UAAD,OAHF,CADF,CADF,CADF;AAWD,CAZD;;AAcA,eAAeE,KAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport ProductList from \"./productList\";\r\nimport AddProduct from \"./addProduct\";\r\nimport { rootReducer } from \"../redux/rootReducer\";\r\nimport { Provider } from \"react-redux\";\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nconst bindMiddleware = (middleware) => {\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    // eslint-disable-next-line global-require,import/no-extraneous-dependencies\r\n    const { composeWithDevTools } = require(\"redux-devtools-extension\");\r\n    return composeWithDevTools(applyMiddleware(...middleware));\r\n  }\r\n  return applyMiddleware(...middleware);\r\n};\r\n\r\nexport const makeStore = (preloadedState, ctx) => {\r\n  const { isServer, req = null } = ctx;\r\n\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    bindMiddleware([sagaMiddleware])\r\n  );\r\n\r\n  if (req || !isServer) {\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  }\r\n\r\n  return store;\r\n};\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"http://localhost:4001/graphql\",\r\n});\r\n\r\nconst Index = () => {\r\n  return (\r\n    <Provider store={makeStore()}>\r\n      <ApolloProvider client={client}>\r\n        <section>\r\n          <h1>Продукты</h1>\r\n          <ProductList />\r\n          <AddProduct />\r\n        </section>\r\n      </ApolloProvider>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}