{"ast":null,"code":"import { applyMiddleware, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { rootReducer } from \"./rootReducer\";\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n    const {\n      composeWithDevTools\n    } = require(\"redux-devtools-extension\");\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nexport const makeStore = (preloadedState, ctx) => {\n  const {\n    isServer,\n    req = null\n  } = ctx;\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(rootReducer, preloadedState, bindMiddleware([sagaMiddleware]));\n\n  if (req || !isServer) {\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n  }\n\n  return store;\n};","map":{"version":3,"sources":["C:/Users/lu4ok/Desktop/Practice/DZ/nextjs-app/redux/index.js"],"names":["applyMiddleware","createStore","createSagaMiddleware","rootReducer","bindMiddleware","middleware","composeWithDevTools","require","makeStore","preloadedState","ctx","isServer","req","sagaMiddleware","store","sagaTask","run","rootSaga"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,WAAT,QAA4B,eAA5B;;AAEA,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AACrC,YAA2C;AACzC;AACA,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACN,eAAe,CAAC,GAAGK,UAAJ,CAAhB,CAA1B;AACD;;AACD,SAAOL,eAAe,CAAC,GAAGK,UAAJ,CAAtB;AACD,CAPD;;AASA,OAAO,MAAMG,SAAS,GAAG,CAACC,cAAD,EAAiBC,GAAjB,KAAyB;AAChD,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,GAAG,GAAG;AAAlB,MAA2BF,GAAjC;AAEA,QAAMG,cAAc,GAAGX,oBAAoB,EAA3C;AAEA,QAAMY,KAAK,GAAGb,WAAW,CACvBE,WADuB,EAEvBM,cAFuB,EAGvBL,cAAc,CAAC,CAACS,cAAD,CAAD,CAHS,CAAzB;;AAMA,MAAID,GAAG,IAAI,CAACD,QAAZ,EAAsB;AACpBG,IAAAA,KAAK,CAACC,QAAN,GAAiBF,cAAc,CAACG,GAAf,CAAmBC,QAAnB,CAAjB;AACD;;AAED,SAAOH,KAAP;AACD,CAhBM","sourcesContent":["import { applyMiddleware, createStore } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { rootReducer } from \"./rootReducer\";\r\n\r\nconst bindMiddleware = (middleware) => {\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    // eslint-disable-next-line global-require,import/no-extraneous-dependencies\r\n    const { composeWithDevTools } = require(\"redux-devtools-extension\");\r\n    return composeWithDevTools(applyMiddleware(...middleware));\r\n  }\r\n  return applyMiddleware(...middleware);\r\n};\r\n\r\nexport const makeStore = (preloadedState, ctx) => {\r\n  const { isServer, req = null } = ctx;\r\n\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    bindMiddleware([sagaMiddleware])\r\n  );\r\n\r\n  if (req || !isServer) {\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n  }\r\n\r\n  return store;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}